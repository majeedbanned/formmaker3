"use client";

import { useState, useEffect } from "react";
import { useRouter, useSearchParams } from "next/navigation";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Pagination,
  PaginationContent,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
} from "@/components/ui/pagination";
import { Button } from "@/components/ui/button";
import { RefreshCw, Filter, X } from "lucide-react";
import { Badge } from "@/components/ui/badge";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";

// Types
interface Question {
  _id: string;
  id: number;
  grade: number;
  question: string;
  questionkey: string;
  cat: string;
  cat1: string;
  cat2: string;
  cat3: string;
  cat4: string;
  difficulty: string;
  type: string;
  option1?: string;
  option2?: string;
  option3?: string;
  option4?: string;
  correctoption?: number;
}

interface PaginationData {
  total: number;
  page: number;
  limit: number;
  pages: number;
}

interface Categories {
  grades: number[];
  cat1: string[];
  cat2: string[];
  cat3: string[];
  cat4: string[];
}

// Add a utility function to convert numbers to Persian
const toPersianNumber = (num: number): string => {
  if (!num) return "";
  const persianDigits = ["۰", "۱", "۲", "۳", "۴", "۵", "۶", "۷", "۸", "۹"];
  return num
    .toString()
    .replace(/\d/g, (digit) => persianDigits[parseInt(digit)]);
};

export default function QuestionBankPage() {
  // State
  const [questions, setQuestions] = useState<Question[]>([]);
  const [pagination, setPagination] = useState<PaginationData>({
    total: 0,
    page: 1,
    limit: 10,
    pages: 0,
  });
  const [categories, setCategories] = useState<Categories>({
    grades: [],
    cat1: [],
    cat2: [],
    cat3: [],
    cat4: [],
  });
  const [loading, setLoading] = useState<boolean>(true);
  const [filters, setFilters] = useState({
    grade: "",
    cat1: "",
    cat2: "",
    cat3: "",
    cat4: "",
  });
  const [selectedQuestion, setSelectedQuestion] = useState<Question | null>(
    null
  );
  const [showQuestionDetail, setShowQuestionDetail] = useState<boolean>(false);

  // Router and search params
  const router = useRouter();
  const searchParams = useSearchParams();

  // Rest of component implementation...

  // Example getPaginationItems function
  const getPaginationItems = () => {
    // Implementation here
    return [];
  };

  // Placeholder for handlePageChange
  const handlePageChange = (page: number) => {
    // Implementation here
  };

  // Placeholder for other functions
  const resetFilters = () => {
    // Implementation here
  };

  const applyFilters = () => {
    // Implementation here
  };

  const handleFilterChange = (filterName: string, value: string) => {
    // Implementation here
  };

  // Render HTML content safely
  const renderHTML = (html: string) => {
    return { __html: html };
  };

  // Add a function to handle row click to show question details
  const handleQuestionClick = (question: Question) => {
    setSelectedQuestion(question);
    setShowQuestionDetail(true);
  };

  return (
    <div>
      {/* Component JSX here */}

      {/* Bottom Pagination (added code) */}
      {pagination.pages > 0 && (
        <div className="mt-4 flex flex-col items-center bottom-pagination">
          <div className="text-sm text-gray-500 mb-2">
            صفحه {toPersianNumber(pagination.page)} از{" "}
            {toPersianNumber(pagination.pages)} - نمایش{" "}
            {toPersianNumber((pagination.page - 1) * pagination.limit + 1)} تا{" "}
            {toPersianNumber(
              Math.min(pagination.page * pagination.limit, pagination.total)
            )}{" "}
            از {toPersianNumber(pagination.total)} سوال
          </div>
          <Pagination>
            <PaginationContent>{getPaginationItems()}</PaginationContent>
          </Pagination>
        </div>
      )}
    </div>
  );
}
